package com.business.order_form.service.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import org.jeecgframework.core.common.service.impl.CommonServiceImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.business.orderNumberGenerator.controller.OrderNumberGeneratorController;
import com.business.orderNumberGenerator.service.OrderNumberGeneratorI;
import com.business.order_form.dao.XOrderDao;
import com.business.order_form.entity.XOrderEntity;
import com.business.order_form.service.XOrderServiceI;

@Service("xOrderService")
@Transactional
public class XOrderServiceImpl extends CommonServiceImpl implements XOrderServiceI {

	@Autowired
	private OrderNumberGeneratorI orderNumberGenerator;
	@Autowired
	private XOrderDao xOrderDao;
 	public <T> void delete(T entity) {
 		super.delete(entity);
 		//执行删除操作配置的sql增强
		this.doDelSql((XOrderEntity)entity);
 	}
 	
 	public <T> Serializable save(T entity) {
 		Serializable t = super.save(entity);
 		//执行新增操作配置的sql增强
 		this.doAddSql((XOrderEntity)entity);
 		return t;
 	}
 	
 	public <T> void saveOrUpdate(T entity) {
 		super.saveOrUpdate(entity);
 		//执行更新操作配置的sql增强
 		this.doUpdateSql((XOrderEntity)entity);
 	}
 	
 	/**
	 * 默认按钮-sql增强-新增操作
	 * @param id
	 * @return
	 */
 	public boolean doAddSql(XOrderEntity t){
	 	return true;
 	}
 	/**
	 * 默认按钮-sql增强-更新操作
	 * @param id
	 * @return
	 */
 	public boolean doUpdateSql(XOrderEntity t){
	 	return true;
 	}
 	/**
	 * 默认按钮-sql增强-删除操作
	 * @param id
	 * @return
	 */
 	public boolean doDelSql(XOrderEntity t){
	 	return true;
 	}
 	
 	/**
	 * 替换sql中的变量
	 * @param sql
	 * @return
	 */
 	public String replaceVal(String sql,XOrderEntity t){
 		sql  = sql.replace("#{id}",String.valueOf(t.getId()));
 		sql  = sql.replace("#{attribute}",String.valueOf(t.getAttribute()));
 		sql  = sql.replace("#{gmzid}",String.valueOf(t.getGmzid()));
 		sql  = sql.replace("#{gysid}",String.valueOf(t.getGysid()));
 		sql  = sql.replace("#{order_number}",String.valueOf(t.getOrderNumber()));
 		sql  = sql.replace("#{goods_id}",String.valueOf(t.getGoodsId()));
 		sql  = sql.replace("#{amount}",String.valueOf(t.getAmount()));
 		sql  = sql.replace("#{status}",String.valueOf(t.getStatus()));
 		sql  = sql.replace("#{date}",String.valueOf(t.getDate()));
 		sql  = sql.replace("#{temp}",String.valueOf(t.getTemp()));
 		sql  = sql.replace("#{UUID}",UUID.randomUUID().toString());
 		return sql;
 	}
 	
 	
 	
 	/**
 	 * 下订单
 	 */
 	public JSONObject dealOrder(String attribute,String storeId,JSONArray goodsArray){
		JSONObject jsonTemp = new JSONObject();		
		JSONObject returnJsonObject = new JSONObject();
		JSONArray returnArray =new JSONArray();
		XOrderEntity xOrderEntity;
		long totalPrice = 0;
		String orderNumber = orderNumberGenerator.getOrderNumber();
		for (int i = 0; i < goodsArray.size(); i++) {
			xOrderEntity = new XOrderEntity();
			//---------------------------------------->
			//设置订单号

			//String orderNumber = "0001";
			xOrderEntity.setOrderNumber(orderNumber);
			//为实体赋值	属性  和  购买者ID
			xOrderEntity.setAttribute(attribute);
			xOrderEntity.setGmzid(storeId);
			JSONObject j1  =  goodsArray.getJSONObject(i);
			String goodsId = j1.getString("goodsId");//获得商品ID
			String amount = j1.getString("amount");//获得商品数量
			xOrderEntity.setGoodsId(goodsId);//判断商品ID
			xOrderEntity.setAmount(amount);//设置购买量		
			//设置订单状态
			xOrderEntity.setStatus("待确认");		
			//选择经销商
			xOrderEntity.setGysid("0001");		
			//生成时间
			xOrderEntity.setDate(new Date());			
			//刷新到数据表
			saveOrUpdate(xOrderEntity);
			jsonTemp = xOrderEntity.receiveJsonObject();
			returnArray.add(jsonTemp);////////////////////////////////
			if(i==goodsArray.size()-1){
				returnJsonObject.put("attribute", xOrderEntity.getAttribute());
				returnJsonObject.put("gmzid", xOrderEntity.getGmzid());
				returnJsonObject.put("gysid", xOrderEntity.getGysid());
				returnJsonObject.put("orderNumber", xOrderEntity.getOrderNumber());
				returnJsonObject.put("date", xOrderEntity.getDate());
				returnJsonObject.put("status", xOrderEntity.getStatus());
			}
		}
		returnJsonObject.put("goods", returnArray);	
		System.out.println(returnJsonObject.toJSONString());
		return returnJsonObject;
 	}
 	
 	
 	public JSONArray packageOrder(String vistorId,String orderNumber,String status,String attribute){
		
			
		/*
		 *   	经销商ID，订单号，返回该订单信息
		 *  	传经销商ID，订单号，status，则修改该订单status，返回修改后的订单信息
		 */

		
 		JSONArray returnArray =new JSONArray();
		if(orderNumber!=null&&vistorId!=null){
			
			//获取订单实体
			List<XOrderEntity> list = xOrderDao.getOrderByOrderNumber(orderNumber);
					//super.findByProperty(XOrderEntity.class, "orderNumber", orderNumber);
			
			for (XOrderEntity xOrderEntity : list) {
				//循环遍历订单实体，判断是否修改status
				if(status!=null){
					xOrderEntity.setStatus(status);
					//刷新数据库
					saveOrUpdate(xOrderEntity);
				}
				//生成返回的JSON
				returnArray.add(xOrderEntity.receiveJsonObject());
			}
			//返回对象
			JSONObject returnJsonObject = new JSONObject();
			//设定格式
			XOrderEntity xOrderEntity = new XOrderEntity();
			xOrderEntity = list.get(0);
			returnJsonObject.put("attribute", xOrderEntity.getAttribute());
			returnJsonObject.put("gmzid", xOrderEntity.getGmzid());
			returnJsonObject.put("gysid", xOrderEntity.getGysid());
			returnJsonObject.put("orderNumber", xOrderEntity.getOrderNumber());
			returnJsonObject.put("date", xOrderEntity.getDate());
			returnJsonObject.put("status", xOrderEntity.getStatus());
			returnJsonObject.put("goods", returnArray);
			JSONArray jsonArray = new JSONArray();
			jsonArray.add(0, returnJsonObject);
			
			return jsonArray;
			//

		}else if(vistorId!=null){
			//只传经销商ID
			
			//需要一个根据订单号进行订单状态修改的sql  saveOrUpdate   先来一个查询订单号的sql
			List<XOrderEntity> list = new ArrayList<XOrderEntity>();
					//
			if(attribute.equals("store")){
				//list = xOrderDao.getOrderByID(vistorId);
				 list = xOrderDao.getOrderByStoreID(vistorId);
			}else{
				 list = xOrderDao.getOrderByID(vistorId);
			}
			
			
			//获得该经销商id的订单信息后，得到订单号，再次sql，查找相同订单信息
			
			JSONObject infoObject = null;
			JSONArray goodsArray = null;
			JSONObject orderObject = null;
			String initlizeOrderNumber = "abc";
			for (XOrderEntity xOrderEntity : list) {
				//方法，传入xOrderEntity，判断订单号与上次是否相同

				if(xOrderEntity.getOrderNumber().equals(initlizeOrderNumber)){
					continue;
				}else{
					//不同,sql该订单号					
					infoObject = new JSONObject();
					goodsArray = new JSONArray();
					orderObject = new JSONObject();
					initlizeOrderNumber = xOrderEntity.getOrderNumber();
					
					List<XOrderEntity> listnew  = xOrderDao.getOrderByOrderNumber(initlizeOrderNumber);
					for (XOrderEntity xOrderEntityEqualOrderNumber : listnew) {
						infoObject = new JSONObject();
						infoObject = xOrderEntityEqualOrderNumber.receiveJsonObject();
						goodsArray.add(infoObject);
					}
					
					orderObject.put("orderNumber", initlizeOrderNumber);
					orderObject.put("attribute", xOrderEntity.getAttribute());
					orderObject.put("gmzid", xOrderEntity.getGmzid());
					orderObject.put("gysid", xOrderEntity.getGysid());
					orderObject.put("status", xOrderEntity.getStatus());
					orderObject.put("date", xOrderEntity.getDate());
					orderObject.put("goods", goodsArray);
				}
					
				returnArray.add(orderObject);

				
			}				
			return returnArray;
			
		}else{
			System.out.println("查询或修改订单传递参数错误！");
			return null;
		}
 	}
 	
 	
 	
 	
 	
}